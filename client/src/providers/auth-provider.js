import { useState, useEffect, useContext, createContext } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
const AuthContext = createContext()

const AuthContextProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [apiCredentials, setApiCredentials] = useState({})

  const navigate = useNavigate()
  const location = useLocation()


  const handleLogin = ({ apiKey, apiSecret }) => {
    // this is a very simplistic way of logging in. There is no validation to make surer the key and secret are valid.
    if (apiKey && apiSecret) {
      setApiCredentials({
        apiKey,
        apiSecret
      })

      localStorage.setItem('keys', JSON.stringify({ apiKey, apiSecret }))
      setIsAuthenticated(true)
      navigate('/dashboard', { replace: true })
    }
    else {
      return new Error('Please provide api key and secret.')
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('keys')
    setIsAuthenticated(false)
    setApiCredentials({})
    navigate('/', { replace: true })

  }

  useEffect(() => {
    const keys = JSON.parse(localStorage.getItem('keys')) || {} 
    if (Object.keys(keys).length > 0) {
      // don't route to login if user is already logged in
      const from = location?.pathname === '/' ? '/dashboard' : location?.pathname
      setApiCredentials(keys)
      setIsAuthenticated(true)
      navigate(from, { replace: true })
    }
    else {
      navigate('/', { replace: true })
    }
  }, [location?.pathname, navigate])


  return (
    <AuthContext.Provider value={{ isAuthenticated, apiCredentials, handleLogin, handleLogout }}>
      {children}
    </AuthContext.Provider>
  )
}

const useAuthContext = () => {
  const { isAuthenticated, apiCredentials, handleLogin, handleLogout } = useContext(AuthContext)
  return ({ isAuthenticated, apiCredentials, handleLogin, handleLogout })
}

export { AuthContextProvider, useAuthContext }