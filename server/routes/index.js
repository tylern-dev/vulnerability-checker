import { Router } from 'express'
import Enzoic from '@enzoic/enzoic'
const router = Router()

const buildEnzoicConnection = (req) => {
  const apiKey = req.headers['x-api-key']
  const secret = req.headers['x-secret']
  return new Enzoic(apiKey, secret)
}

// check if the password is compromised
router.get('/check-password', (req, res) => {
  const passwordToCheck = req.query.password

  const enzoic = buildEnzoicConnection(req)

  enzoic.checkPassword(passwordToCheck, (error, passwordCompromised) => {
    if (error) {
      console.log(error)
      return res.status(500).json({ error })
    }
    return res.json({ status: passwordCompromised })
  })
})

// check the username for compromisation and return the title and id if there is a compromise
router.get('/check-username', (req, res) => {
  const user = req.query.user

  const enzoic = buildEnzoicConnection(req)

  const getDetails = (id) => new Promise((resolve, reject) => {
    enzoic.getExposureDetails(id, (error, exposureDetail) => {
      if (error) {
        reject(new Error(`API Error: ${error}`))
      }
      resolve({ id, title: exposureDetail.title })
    })
  })

  enzoic.getExposuresForUser(user, async (error, result) => {
    if (error) {
      return res.status(500).json({ error })
    }
    try {
      const details = await Promise.all(result.exposures.map(getDetails))

      const exposureDetails = {
        count: result.count,
        details
      }
      res.json(exposureDetails)
    } catch (detailError) {
      res.status(500).json({ detailError })
    }
  })

})

router.get('/exposure-details', (req, res) => {
  const id = req.query.id

  const enzoic = buildEnzoicConnection(req)

  enzoic.getExposureDetails(id, (error, result) => {
    if (error) {
      return res.status(500).json({ error })
    }

    return res.json({ result })
  })
})

export default router